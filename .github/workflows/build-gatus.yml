name: Build and Deploy Gatus Image

on:
  push:
    branches: [ main ]
    paths:
      - 'garus-app/**'
      - '.github/workflows/build-gatus.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'garus-app/**'
      - '.github/workflows/build-gatus.yml'
  workflow_dispatch:

env:
  AWS_REGION: eu-west-1
  ECR_REPOSITORY: gatuswebapp
  IMAGE_TAG: latest

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::847025106966:role/github-actions-gatus-role
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Check ECR repository exists
      run: |
        echo "Checking if ECR repository exists..."
        aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} || {
          echo "ECR repository does not exist. Creating it..."
          aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }}
        }
        
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ env.IMAGE_TAG }}
      run: |
        echo "Building Docker image..."
        echo "ECR Registry: $ECR_REGISTRY"
        echo "ECR Repository: $ECR_REPOSITORY"
        echo "Image Tag: $IMAGE_TAG"
        
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        echo "Timestamp: $TIMESTAMP"
        
        docker build \
          --platform linux/amd64 \
          --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          --tag $ECR_REGISTRY/$ECR_REPOSITORY:$TIMESTAMP \
          ./garus-app
        
        echo "Docker build completed successfully!"
        
        echo "Pushing images to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$TIMESTAMP
        
        echo "Images pushed successfully!"
        
    - name: Output image URI
      run: |
        echo "ðŸŽ‰ Image built and pushed successfully!"
        echo "Image URI: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
        echo "Latest tag: ${{ env.IMAGE_TAG }}"
        echo "Timestamp tag: $TIMESTAMP"
        
  test-build:
    runs-on: ubuntu-latest
    needs: build-and-push
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Test Docker build locally
      run: |
        echo "Testing Docker build locally..."
        cd garus-app
        docker build --platform linux/amd64 -t gatuswebapp:test .
        echo "âœ… Docker build test passed!"
        
    - name: Verify image contents
      run: |
        echo "Verifying image contents..."
        docker run --rm gatuswebapp:test /app/gatus --version || echo "Version check not available"
        docker run --rm gatuswebapp:test ls -la /app/
        echo "âœ… Image verification completed!"
