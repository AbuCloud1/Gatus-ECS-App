name: Build and Deploy Gatus Image & Infrastructure

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'garus-app/**'
      - 'terraform/**'
      - '.github/workflows/build-gatus.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'garus-app/**'
      - 'terraform/**'
      - '.github/workflows/build-gatus.yml'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::847025106966:role/github-actions-gatus-role
        aws-region: eu-west-1
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Update Go dependencies
      working-directory: ./garus-app/source
      run: |
        go get -u github.com/gofiber/fiber/v2@latest
        go mod tidy
        
    - name: Build and push image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        aws ecr describe-repositories --repository-names gatuswebapp --region eu-west-1 || aws ecr create-repository --repository-name gatuswebapp --region eu-west-1
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        docker build --platform linux/amd64 --tag $ECR_REGISTRY/gatuswebapp:latest --tag $ECR_REGISTRY/gatuswebapp:$TIMESTAMP ./garus-app
        docker push $ECR_REGISTRY/gatuswebapp:latest
        docker push $ECR_REGISTRY/gatuswebapp:$TIMESTAMP
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.login-ecr.outputs.registry }}/gatuswebapp:latest
        format: 'table'
        exit-code: '0'
        
  deploy-dev:
    runs-on: ubuntu-latest
    needs: build-and-push-image
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::847025106966:role/github-actions-gatus-role
        aws-region: eu-west-1
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      
    - name: Deploy Dev Infrastructure
      run: |
        cd terraform/environments/dev
        terraform init
        terraform apply -auto-approve
        
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push-image
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::847025106966:role/github-actions-gatus-role
        aws-region: eu-west-1
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      
    - name: Deploy Staging Infrastructure
      run: |
        cd terraform/environments/staging
        terraform init
        terraform apply -auto-approve
        
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-push-image, deploy-staging]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::847025106966:role/github-actions-gatus-role
        aws-region: eu-west-1
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      
    - name: Deploy Production Infrastructure
      run: |
        cd terraform/environments/prod
        terraform init
        terraform apply -auto-approve
